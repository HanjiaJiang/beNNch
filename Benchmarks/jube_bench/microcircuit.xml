<?xml version="1.0" encoding="UTF-8"?>
<jube>

  <!-- microcircuit model of Potjans & Diesmann (2014) -->

  <include-path>
    <path>../jube_config/</path>
  </include-path>

  <!-- model-specific name and output path -->
  <benchmark name="microcircuit" outpath="../../BenchWork/jube_microcircuit">

    <!-- TODO user and account data should not be mixed with models -->
    <parameterset name="global">
      <parameter name="base_path" type="string">$PROJ/repositories</parameter>
      <parameter name="account" type="string">jinb33</parameter>
      <parameter name="email_address" type="string"></parameter>
      <!-- TODO repository benchmark-models as submodule? -->
      <parameter name="model_dir" type="string">${bench_model}/benchmark-models/Potjans_2014</parameter>
      <parameter name="run_file" type="string">bm_run_microcircuit.py</parameter>
      <!--<parameter name="modules">nest-simulator/3.0/default</parameter>-->
      <parameter name="modules">GCC CMake ParaStationMPI Python SciPy-Stack GSL jemalloc</parameter>
      <parameter name="PARTITION">dc-cpu</parameter><!--batch-->
    </parameterset>

    <!-- TODO decide which parameters shall be used for all models and which are specific, consider times in seconds -->
    <parameterset name="simulation_params">
      <parameter name="sim_params">sim_params.py</parameter>
      <parameter name="model_time_sim">10000.0</parameter><!-- total simulation time in ms -->
      <parameter name="model_time_presim">1000.0</parameter><!-- pre simulation time in ms -->
      <parameter name="seed">55</parameter><!-- main rng seed -->
      <parameter name="record_spikes" type="string"></parameter><!-- change to 'spike_detector' for spike recordings -->
      <parameter name="kwds" separator=";" type="string"></parameter><!-- can be used for passing arguments to SetKernelStatus, such as max_buffer_size_spike_data. If no arguments should be passed leave this empty. If something should be passed insert a dictionary, eg: {'max_buffer_size_spike_data': 10} -->
    </parameterset>

    <parameterset name="network_params">
      <parameter name="net_params">network_params.py</parameter>
      <parameter name="N_SCALING">1.</parameter>
      <parameter name="K_SCALING">1.</parameter>
      <parameter name="POISSON_INPUT">False</parameter>
      <parameter name="V0_TYPE" separator="," type="text">'optimized'</parameter>
      <parameter name="SYNAPSE_TYPE" separator="," type="text">'static_synapse'</parameter>
    </parameterset>

    <!-- TODO model-specific benchmark(s), for the microcircuit this could be extended to within one node -->
    <parameterset name="benchmark_params">
      <parameter name="num_nodes" type="int" separator=",">1,2,3,4,5,6,7,8,9,10</parameter>
      <parameter name="base_vp" type="int">128</parameter>
      <parameter name="threads_per_node" type="int">64</parameter><!--TODO is this threads per task?-->
      <parameter name="num_vps" type="int" mode="python">$base_vp*$num_nodes</parameter>
      <parameter name="WALLTIME" type="string">00:30:00</parameter>
      <parameter name="NEST_VERSION">3</parameter>
      <parameter name="affinity" type="string">--cpu-bind=sockets --distribution=block:cyclic:fcyclic</parameter> 
    </parameterset>

    <!-- load and copy model-specific files -->
    <fileset name="model_files"> <!-- -->
      <copy>$model_dir/bm_run_microcircuit.py</copy>
      <copy>$model_dir/bm_helpers.py</copy>
      <copy>$model_dir/sim_params.py</copy>
      <copy>$model_dir/network_params.py</copy>
      <copy>$model_dir/helpers.py</copy>
      <copy>$model_dir/network.py</copy>
      <copy>$model_dir/stimulus_params.py</copy>
    </fileset>

    <!-- This subsituteset maps the parameters that were defined in this xml
         file to the target patterns that JUBE will search for in the
         simulation files. The pattern file is bm_run_microcircuit.py which is
         also the wrapper file for the actual microcircuit simulation. The
         source pattern will be replaced by the value contained in dest -->
    <substituteset name="simulation_substitutions">
      <iofile in="bm_run_microcircuit.py" out="bm_run_microcircuit.py"/>
      <sub source="{record_spikes}" dest="$record_spikes"/>
      <sub source="{POISSON_INPUT}" dest="$POISSON_INPUT"/>
      <sub source="{kwds}" dest="$kwds"/>
      <sub source="{V0_TYPE}" dest="$V0_TYPE"/>
      <sub source="{SYNAPSE_TYPE}" dest="$SYNAPSE_TYPE"/>
      <sub source="{model_time_sim}" dest="$model_time_sim"/>
      <sub source="{model_time_presim}" dest="$model_time_presim"/>
      <sub source="{seed}" dest="$seed"/>
      <sub source="{threads_per_node}" dest="$threads_per_node"/>
      <sub source="{N_SCALING}" dest="$N_SCALING"/>
      <sub source="{K_SCALING}" dest="$K_SCALING"/>
    </substituteset>


    <step name="bench">
      <use>global</use>
      <use from="dir_config.xml">dir_config</use>
      <use from="bench_jobs.xml">slurm,run_benchmark,files,sub_bench_job</use>
      <use>simulation_params</use>
      <use>network_params</use>
      <use>benchmark_params</use>
      <use>model_files,simulation_substitutions</use>
      <do done_file="$ready_file">$submit_cmd $job_file</do>
    </step>


    <!-- Analyse -->
    <analyser name="analyse_scale_check">
      <use from="bench_jobs.xml">nest_pattern_MAM_timer</use>      <!-- use existing patternset -->
      <analyse step="bench">
        <file>timer_data.txt</file>        <!-- file which should be scanned -->
      </analyse>
    </analyser>

    <!-- Create result table -->
    <!-- TODO add more information to table, e.g., affinity, local_spike_counter -->
    <!-- TODO also add hash as in microcircuit_jube_benches, name could be hash (fix file extension from .dat to .csv) -->
    <result>
      <use>analyse_scale_check</use>      <!-- use existing analyser -->
      <table name="microcircuit" style="csv" sort="number">
        <column>num_nodes</column>
        <column>threads_per_node</column>
        <column>tasks_per_node</column>
        <column>model_time_sim</column>
        <column>wall_time_create</column>
        <column>wall_time_connect</column>
        <column>wall_time_sim</column>
        <column>wall_time_phase_collocate</column>
        <column>wall_time_phase_communicate</column>
        <column>wall_time_phase_deliver</column>
        <column>wall_time_phase_update</column>
        <column>wall_time_communicate_target_data</column>
        <column>wall_time_gather_spike_data</column>
        <column>wall_time_gather_target_data</column>
        <column>wall_time_communicate_prepare</column>
      </table>
    </result>


  </benchmark>
</jube>

