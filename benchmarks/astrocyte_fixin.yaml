# beNNch - Unified execution, collection, analysis and
# comparison of neural network simulation benchmarks.
# Copyright (C) 2021 Forschungszentrum Juelich GmbH, INM-6

# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
# This program is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE. See the GNU General Public License for more details.
# You should have received a copy of the GNU General Public License along with
# this program. If not, see <https://www.gnu.org/licenses/>.

# SPDX-License-Identifier: GPL-3.0-or-later

include-path:
  - ../helpers/
  - ../config/

# model-specific name and output path
name: astrocyte
outpath: ../outpath/fix0814
parameterset:
      name: model_commands
      parameter:
          - {name: run_file, type: string, _: "$jube_wp_abspath/astrocyte_fixin.py"}
          - {name: log_path, type: string, _: "${jube_wp_abspath}"}
fileset:
# load and copy model-specific files
    name: model_files
    copy:
      - $model_path/astrocyte_fixin.py

# This subsituteset maps the parameters that were defined in this yaml
# file to the target patterns that JUBE will search for in the
# simulation files. The pattern file is hpc_benchmark.py. The
# source pattern will be replaced by the values.
substituteset:
      name: model_substitutions
      iofile: {in: astrocyte_fixin.py, out: astrocyte_fixin.py}
      sub:
      - {source: "{num_vps}", dest: $num_vps}
      - {source: "{record_spikes}", dest: $record_spikes}
      - {source: "{model_time_sim}", dest: $model_time_sim}
      - {source: "{model_time_presim}", dest: $model_time_presim}
      - {source: "{N_SCALING}", dest: $scale}
      - {source: "{rng_seed}", dest: $rng_seed}

step:
# build step
    - name: build
      export: true
      use:
      - from: user_config.yaml
        _: user_config
      - from: astrocyte_benchmark_config.yaml
        _: file_paths,model_parameters,software_parameters
      - from: helpers.yaml
        _: slurm_build,run_build,files,sub_build_job
      do:
        - build --get --silent ${simulator} ${version} ${variant} ${suffix} && export DEP=`$submit_cmd --parsable $job_file`

# benchmark step
    - name: bench
      depend: build
      use:
      - model_commands, model_files, model_substitutions
      - from: user_config.yaml
        _: user_config
      - from: astrocyte_benchmark_config.yaml
        _: file_paths,model_parameters,machine_parameters,software_parameters
      - from: helpers.yaml
        _: slurm_bench,run_benchmark,files,sub_bench_job,scaling_experiment,init_job_file_variables
      do:
        done_file: $ready_file
        _: $submit_cmd --dependency=afterok:$$DEP $job_file
# analysis step
analyser:
      name: analyse
      use:
        - from: helpers.yaml
          _: timer_pattern
      analyse:
        step: bench
        file: timer_data.txt

# result step
result:
      name: result
      use: analyse
      table:
        name: result_table
        style: csv
        sort: number
        column:
        - rng_seed
        - num_nodes
        - threads_per_task
        - tasks_per_node
        - model_time_sim
        - wall_time_create
        - wall_time_connect
        - wall_time_sim
        - wall_time_phase_collocate
        - wall_time_phase_communicate
        - wall_time_phase_deliver
        - wall_time_phase_update
        - wall_time_communicate_target_data
        - wall_time_gather_spike_data
        - wall_time_gather_target_data
        - wall_time_communicate_prepare
        - wall_time_phase_deliver_secondary
        - wall_time_phase_gather_secondary
        - py_time_create
        - py_time_connect
        - network_size
        - num_connections
        - local_spike_counter
        - tsodyks_synapse
        - sic_connection
        - time_construction_connect_third_inner_count
        - time_construction_connect_third_inner_max
        - time_construction_connect_third_inner_fill
        - time_construction_connect_third_inner_communicate
        - time_construction_connect_third_inner_connect
